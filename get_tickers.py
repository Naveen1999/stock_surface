import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import time
import matplotlib.pyplot as plt
import datetime as dt
import pandas as pd
import pandas_datareader.data as web
from matplotlib import style
# import stocks as st
from datetime import timedelta
import sample_slopes as sample_slopes
import support_vector as support_vector

# import plotly
# plotly.offline.init_notebook_mode(connected=True)
# import plotly.offline as py
import ploty_web as plot_web


plot_bool = 0

tickers = ["AAPL", "MSFT", "GOOG", "FB", "INTC", 'TSM',
           "CSCO", "ORCL", "NVDA", "SAP", "IBM", "ADBE",
           "TXN", "AVGO", "CRM", "QCOM", "MU", "BIDU",
           "ADP", "VMW", "ATVI", "AMAT", "INTU",
           "CTSH", "EA", "NXPI", "INFY", "HPQ", "ADI", "NOK"]


start = dt.datetime(2012, 10, 1)
end = dt.datetime(2018, 4, 14)
mpl.rcParams['legend.fontsize'] = 10

fig = plt.figure(figsize=(8, 8))

ax = fig.gca(projection='3d')

style.use('ggplot')

delta = timedelta(days=1)

plot_df = pd.DataFrame()

df2 = pd.DataFrame()


class Ticker_Data():
    """
    object to hold the stock data
    """

    def __init__(self, df):
        self.main_df = df

    def append_change_column(self, df, offset, ticker):

        # df2['change'] = df['Close'].pct_change(1, "pad", None, delta)
        df2['change'] = np.log(df['close']) - np.log(df['close'].shift(1))
        plot_df[str(ticker)] = df2['change']

        self.main_df[str(ticker) + 'CHG'] = df2['change']

        self.main_df[str(ticker) + 'CLS'] = df['close']

        print self.main_df

        return self.main_df

    def backTester(self, df):
        for x in range(len(df.columns) - 2):
            df['stock' + str(x + 1)]
            df['stock1compair'] = np.where(df['stock' + str(x + 1)].values < df['stock' + str(x)].values and
                                           df['stock' + str(x + 1)].values < df['stock' + str(x + 2)].values, 1, 0)
        return df

    def drop_row_with_zeros(self):
        """
        removes the rows with zero on teh self.dataframe
        """

        columns = list(self.main_df)

        self.main_df = self.main_df[self.main_df[columns] != 0]

    def drop_row_with_NA(self):
        """
        removes the rows with NA on teh self.dataframe
        """

        # self.main_df = self.main_df[self.main_df[columns] != 0]
        self.main_df = self.main_df.dropna()


def main(batch_size, look_ahead):
    """
    da main function
    """
    i = 0
    main_df = pd.DataFrame()

    ticker_data = Ticker_Data(main_df)

    # NOTE ============start here to get new stock data=======================
    for ticker in tickers:
        print ticker
        time.sleep(.02)
        # print ticker
        df = web.DataReader(ticker, 'iex', start, end)
        df = df.reset_index(level='date')
        # print df.head()
        ticker_data.append_change_column(df, i, ticker)

        i = i + 50

    # remove the rows that contain any 0's or NA

    # ticker_data.drop_row_with_zeros()
    ticker_data.drop_row_with_NA()

    ticker_data.main_df.to_pickle('stock_data/df_without_zeros2010-2018.pkl')
    # NOTE ============end================================================

    ticker_data.main_df = pd.read_pickle(
        'stock_data/df_without_zeros2010-2018.pkl')
    # add the slope sum values to the dataframe
    ticker_data.main_df = sample_slopes.create_slope_sum(ticker_data.main_df)

    # write the whole datarame to a csv if you want to
    ticker_data.main_df.to_csv('stock_data_slope_sumNoNA.csv')

    # get the names of all the column titles
    columns = list(ticker_data.main_df)

    # get the names of the columns that have a slope_sum
    columns_with_sample_slopes = sample_slopes.get_columns_with_slope_sum(
        columns)

    # set up the ML package to hold the features and target values
    sv = support_vector.Support_Vector([], [])

    for column in columns_with_sample_slopes:

        y_values = sample_slopes.generate_target_values(
            ticker_data.main_df, batch_size, column.replace('slope_sum', 'CLS'), look_ahead)

        # keeps adding new target values to varable
        sv.Y = sv.Y + y_values[0]

        # create_batch_of_slopes(df, batch_count, cut_length)
        # y_values[1] bec thats used to tell create batch_of_slopes where to
        # stop
        x_values = sample_slopes.create_batch_of_slopes(
            ticker_data.main_df, column, batch_size,   y_values[1])

        # keeps adding new feature values to varable
        sv.X = sv.X + x_values
    # print sv.Y, 'Yvalues'
    # print sv.X, 'Xvalues'
    print 'training the model...'

    sv.train()
    # sv.run_optunity()

    test_data = [[-0.01470120750219639, 0.006771400804002292, 0.02935404543263953, 0.06439198752080566, -0.008048167204254497, -0.00612302149581212, -0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354], [0.006771400804002292, 0.02935404543263953, 0.06439198752080566, -0.008048167204254497, -0.00612302149581212, -0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026], [0.02935404543263953, 0.06439198752080566, -0.008048167204254497, -0.00612302149581212, -0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897], [0.06439198752080566, -0.008048167204254497, -0.00612302149581212, -0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304], [-0.008048167204254497, -0.00612302149581212, -0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396], [-0.00612302149581212, -0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683], [-0.015210868165245639, -0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266], [-0.03462405436927107, 0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443], [0.012973498275118178, -0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732], [-0.02779671701526354, 0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418], [0.043037473246442026, -0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994], [-0.11985667561228897, -0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194], [-0.0157367253234304, 0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271], [0.030571002627573396, 0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703], [0.026783735648487683, 0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023], [0.013082836446711266, -0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023, 0.005448686651291057], [-0.008461041137519443, -0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023, 0.005448686651291057, -0.02873219823872586], [-0.04036216733790732, -0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023, 0.005448686651291057, -0.02873219823872586, -0.03261115701147532], [-0.015213950239819418, 0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023, 0.005448686651291057, -0.02873219823872586, -0.03261115701147532, 0.016328487685365545], [0.013206099115746994, 0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023, 0.005448686651291057, -0.02873219823872586, -0.03261115701147532, 0.016328487685365545, 0.01679816043293303], [0.05887299241034194, -0.010456807511882271, -0.009185393826133703, -0.03696572347477023, 0.005448686651291057, -


    # for sample in test_data:
    #     print sv.predict_out_put([sample])


def iterate_over_all_batch_and_look_ahead():
    """ 
    iterates over all the differnt comindations and writes to a csv file
    """

    for j in range(3, 15):
        for i in range(2, 50):

            sell, buy = main(i, j)

            with open('hold_percents.txt', 'a')as f:
                f.write(str(float(sell[0]) / float((sell[1] + sell[0]))) + ',' +
                        str(float(buy[1]) / float(buy[1] + buy[0])) +
                        ', ' + str(i) + ',' + str(j) + '\n')
            print i, j

if '__main__' == __name__:

    # sell, buy = main(18, 2)
    main(18, 2)
